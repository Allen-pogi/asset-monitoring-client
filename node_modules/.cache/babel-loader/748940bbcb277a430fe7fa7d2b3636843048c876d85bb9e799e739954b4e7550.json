{"ast":null,"code":"var _jsxFileName = \"C:\\\\asset-monitoring-client\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { initDarkMode } from \"./utils/darkMode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ninitDarkMode();\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this));\n\n// ✅ Register service worker here\n// if (\"serviceWorker\" in navigator) {\n//   window.addEventListener(\"load\", () => {\n//     navigator.serviceWorker\n//       .register(\"/service-worker.js\")\n//       .then((reg) => console.log(\"✅ Service Worker registered:\", reg))\n//       .catch((err) =>\n//         console.log(\"❌ Service Worker registration failed:\", err)\n//       );\n//   });\n// }\n\n// 🧹 Also manually unregister any existing service workers\nif (\"serviceWorker\" in navigator) {\n  navigator.serviceWorker.getRegistrations().then(registrations => {\n    registrations.forEach(reg => reg.unregister());\n    console.log(\"🧹 All service workers unregistered for this app\");\n  });\n}","map":{"version":3,"names":["React","ReactDOM","App","initDarkMode","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","navigator","serviceWorker","getRegistrations","then","registrations","forEach","reg","unregister","console","log"],"sources":["C:/asset-monitoring-client/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { initDarkMode } from \"./utils/darkMode\";\n\ninitDarkMode();\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// ✅ Register service worker here\n// if (\"serviceWorker\" in navigator) {\n//   window.addEventListener(\"load\", () => {\n//     navigator.serviceWorker\n//       .register(\"/service-worker.js\")\n//       .then((reg) => console.log(\"✅ Service Worker registered:\", reg))\n//       .catch((err) =>\n//         console.log(\"❌ Service Worker registration failed:\", err)\n//       );\n//   });\n// }\n\n// 🧹 Also manually unregister any existing service workers\nif (\"serviceWorker\" in navigator) {\n  navigator.serviceWorker.getRegistrations().then((registrations) => {\n    registrations.forEach((reg) => reg.unregister());\n    console.log(\"🧹 All service workers unregistered for this app\");\n  });\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,YAAY,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhDF,YAAY,CAAC,CAAC;AAEd,MAAMG,IAAI,GAAGL,QAAQ,CAACM,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,cACTL,OAAA,CAACL,KAAK,CAACW,UAAU;EAAAC,QAAA,eACfP,OAAA,CAACH,GAAG;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,eAAe,IAAIC,SAAS,EAAE;EAChCA,SAAS,CAACC,aAAa,CAACC,gBAAgB,CAAC,CAAC,CAACC,IAAI,CAAEC,aAAa,IAAK;IACjEA,aAAa,CAACC,OAAO,CAAEC,GAAG,IAAKA,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC;IAChDC,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;EACjE,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}