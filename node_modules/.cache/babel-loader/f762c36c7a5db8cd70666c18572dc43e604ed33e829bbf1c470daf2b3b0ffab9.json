{"ast":null,"code":"var _jsxFileName = \"C:\\\\asset-monitoring-client\\\\src\\\\sample.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport localforage from \"localforage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionsOffline = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch from backend and save to IndexedDB\n  const fetchAndStoreTransactions = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/api/transactions/all\");\n      const data = await response.json();\n\n      // data is { total: ..., transactions: [...] }\n      const txArray = Array.isArray(data.transactions) ? data.transactions : [];\n      await localforage.setItem(\"transactions\", txArray);\n      setTransactions(txArray);\n\n      // Save to IndexedDB\n      console.log(\"Transactions stored locally for offline use\");\n    } catch (err) {\n      console.log(\"Unable to fetch (maybe offline), loading from IndexedDB\", err);\n      // Load from IndexedDB if offline\n      const localData = await localforage.getItem(\"transactions\");\n      if (localData) setTransactions(localData);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Lookup a transaction by ID (offline compatible)\n  const getTransactionById = async id => {\n    const localData = await localforage.getItem(\"transactions\");\n    return localData === null || localData === void 0 ? void 0 : localData.find(t => t._id === id);\n  };\n  useEffect(() => {\n    fetchAndStoreTransactions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transactions (Offline Ready)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      border: \"1\",\n      cellPadding: \"5\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: transactions.map(tx => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: tx._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: JSON.stringify(tx)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this)]\n        }, tx._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionsOffline, \"DUmkRmOc9OB7ZZSQstrrGiz1MwE=\");\n_c = TransactionsOffline;\nexport default TransactionsOffline;\nvar _c;\n$RefreshReg$(_c, \"TransactionsOffline\");","map":{"version":3,"names":["React","useEffect","useState","localforage","jsxDEV","_jsxDEV","TransactionsOffline","_s","transactions","setTransactions","loading","setLoading","fetchAndStoreTransactions","response","fetch","data","json","txArray","Array","isArray","setItem","console","log","err","localData","getItem","getTransactionById","id","find","t","_id","children","fileName","_jsxFileName","lineNumber","columnNumber","border","cellPadding","map","tx","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/asset-monitoring-client/src/sample.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport localforage from \"localforage\";\r\n\r\nconst TransactionsOffline = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Fetch from backend and save to IndexedDB\r\n  const fetchAndStoreTransactions = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:5000/api/transactions/all\"\r\n      );\r\n      const data = await response.json();\r\n\r\n      // data is { total: ..., transactions: [...] }\r\n      const txArray = Array.isArray(data.transactions) ? data.transactions : [];\r\n      await localforage.setItem(\"transactions\", txArray);\r\n      setTransactions(txArray);\r\n\r\n      // Save to IndexedDB\r\n      console.log(\"Transactions stored locally for offline use\");\r\n    } catch (err) {\r\n      console.log(\r\n        \"Unable to fetch (maybe offline), loading from IndexedDB\",\r\n        err\r\n      );\r\n      // Load from IndexedDB if offline\r\n      const localData = await localforage.getItem(\"transactions\");\r\n      if (localData) setTransactions(localData);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Lookup a transaction by ID (offline compatible)\r\n  const getTransactionById = async (id) => {\r\n    const localData = await localforage.getItem(\"transactions\");\r\n    return localData?.find((t) => t._id === id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAndStoreTransactions();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Transactions (Offline Ready)</h1>\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        <table border=\"1\" cellPadding=\"5\">\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Details</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {transactions.map((tx) => (\r\n              <tr key={tx._id}>\r\n                <td>{tx._id}</td>\r\n                <td>{JSON.stringify(tx)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionsOffline;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}